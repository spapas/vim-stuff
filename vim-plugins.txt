Some help for plugins I use

easymotion/vim-easymotion
-------------------------

<leader><leader>motion mark to jump to a mark depending on motion. For example (notice I use space for leader so I'll write spsp):
spsp j: Select line below
spsp k: Select line above
spsp w/W: Select next word/WORD
spsp f/Fchar: Select character forwards/backwards
spsp schar: Select charater bidirectional

Notice that it has various default mappings over a single <leader> however I don't want to enable 'em to keep the single leader key for my own usage.

:help easymotion for more

mbbill/undotree
---------------

Displays a tree for undo.

Use <leader>(sp)u to display - hide the tree. Then ctrl+w w to go to the undotree pane

Things to remember:

* The undo history is sorted based on the changes' timestamp. The year/month/day field will not be displayed if the changes were made within the same day.
* The change sequence number is displayed before timestamp.
* The current position is marked as >seq<.
* The next change that will be restored by :redo or <ctrl-r> is marked as {seq}, it's the same as curhead returned by undotree()
* The [seq] marks the last change and where further changes will be added, it's the same as newhead returned by undotree()
* Saved changes are marked as s and the capitalized S indicates the last saved change.


Use ? for more help and help undotree

tpope/vim-surround
------------------

This adds a bunch of surround operators:

csxy: Change surround x to y, for example cs"{ will change "asd" to { asd }.  There is a funny thing with spaces so cs"} will change "asd" to {asd}.
dsx: Delete surround x, for example dst will change <p>koko</p> to koko.
ysmx: Will surround motion with surround x. For example ys3w" will change koko koko koko to "koko koko koko"

This also works with Visual mode (with capital S - lower s starts vim-sneak) but *not* with Visual Line mode; not sure why yet.
Try this to surround a line with brackets: ^ys$[ or use yss[ "surround sentence"

Some more info from the help:

Eight punctuation marks, (, ), {, }, [, ], <, and >, represent themselves
and their counterparts.  If the opening mark is used, contained whitespace is
also trimmed.  The targets b, B, r, and a are aliases for ), }, ], and >
(the first two mirror Vim; the second two are completely arbitrary and
subject to change).

Three quote marks, ', ", `, represent themselves, in pairs.  They are only
searched for on the current line.

A t is a pair of HTML or XML tags.  See |tag-blocks| for details.  Remember
that you can specify a numerical argument if you want to get to a tag other
than the innermost one.

The letters w, W, and s correspond to a |word|, a |WORD|, and a |sentence|,
respectively.  These are special in that they have nothing to delete, and
used with |ds| they are a no-op.  With |cs|, one could consider them a
slight shortcut for ysi (cswb == ysiwb, more or less).

A p represents a |paragraph|.  This behaves similarly to w, W, and s above;
however, newlines are sometimes added and/or removed.

REPLACEMENTS                                    *surround-replacements*

A replacement argument is a single character, and is required by |cs|, |ys|,
and |vS|.  Undefined replacement characters (with the exception of alphabetic
characters) default to placing themselves at the beginning and end of the
destination, which can be useful for characters like / and |.

If either ), }, ], or > is used, the text is wrapped in the appropriate pair
of characters.  Similar behavior can be found with (, {, and [ (but not <),
which append an additional space to the inside.  Like with the targets above,
b, B, r, and a are aliases for ), }, ], and >.  To fulfill the common need for
code blocks in C-style languages, <C-}> (which is really <C-]>) adds braces on
lines separate from the content.

If t or < is used, Vim prompts for an HTML/XML tag to insert.  You may specify
attributes here and they will be stripped from the closing tag. If replacing a
tag, its attributes are kept in the new tag. End your input with > to discard
the those attributes. If <C-T> is used, the tags will appear on lines by
themselves.

If s is used, a leading but not trailing space is added.  This is useful for
removing parentheses from a function call with csbs.

:help surround

'tpope/vim-repeat'
-----------------

Uses . to repeat more things; mainly  related to plugins. For example after
you use ysiw} to surround a word with } you can use the . to surround more
words after it.

justinmk/vim-sneak
------------------

Quick movement with s+two characters. Like f+character but for whole file. Use
; / , to go to next / previous match. S goes backwards. It can also be used to
motions using z, for example dzxx to delete until xx. Or yszxx{ to surround
with brackets up to xx.

You can use 5s+two characters to search +-5 characters around cursor position
vertically.

More info on :help sneak

airblade/vim-gitgutter
----------------------

Display gutters for changes. Use ]c and [c to move between changesets. Use
<leader>hu to undo a changeset and <leader>hs to stage it. There's also
<leader>hp for previewing the change.

More info on :help gitgutter


tpope/vim-commentary
--------------------

Comment stuff out.
Use
gcc to comment out a line (takes a count)
gc to comment out the target of a motion (for example, gcap to comment out a paragraph),
gc in visual mode to comment out the selection
gc in operator pending mode to target a comment.

You can also use it as a command, either with a range like :7,17Commentary, or as part of a :global invocation like with :g/TODO/Commentary.


tpope/vim-unimpaired
--------------------

Various pairs of mappings. Some I've already defined (like ]b for bnext).
Not sure how useful it is, in any case, more help can be found on :help unimpaired.

Useful mappings:
]q  Next item in quicfix list
[q  Prev item in quicfix list
]Q  First item in quicfix list
[Q  Last item in quicfix list

]l  Next item in location list
[l  Prev item in location list
]L  First item in location list
[L  Last item in location list

{count}]<space>     Open count new lines below cursor
{count}[<space>     Open count new lines above cursor

ctrlpvim/ctrlp.vim
------------------

The excellent ctrlp.vim for fuzzy file opening. Works in windows!!! Use ctrl+p
to invoke fuzzy file finder and ctrl+j to invoke fuzzy *buffer* finder.
Ctrl+j/k to go up/down to the list, ctrl+v/s to open the file in a
vertical/horizontal split, ctrl+t to open it in a new tab. Use ctrl+r to
switch to regexp mode mode, ctrl+d to switch to filename only mode.mode.
Finally, ctrl+y creates the file and ctrl+z marks the file for multi-open.

michaeljsmith/vim-indent-object
-------------------------------

Adds a bunch of objects for selecting same-identation things. Useful for
python. These objects are (count)ai/ii (An Indentation level and line above /
Inner Indentation level) aI (same as ai but with line above and below); theres
also aI for completeness but does the same as ii. These are normal text
objects thus you can do things like yai or cii etc.

majutsushi/tagbar
-----------------

Displays a vertical bar with the tags for the current file. Uses the
:TagbarToggle method to toggle that bar (I've mapped it to F9). Needs ctags
installed (get binary from
https://github.com/universal-ctags/ctags-win32/releases).

Has some nice functionality from the tagbar using enter to move to that tag, p
to display the tag without leaving the tagbar window and others (use ? to see
them). Also I've integrated it with lightline so it displays the name of each
method next to the filename and modified field.

ludovicchabant/vim-gutentags
----------------------------

Auto-manages the tags using ctag (see previous plugin). Will create a tags
directory to the (proper depending on .git etc) root of each project. Very
useful you can then use ctrl+] to jump to definitions of classes, functions
etc. Use ctrl+o to return to previous point (jump back and ctrl+i to jump
again to the next point).

Can use :GutentagsUpdate to force update the tags (not reall needed since tags
will be automatically re-generated). Finally notice that gutantags is
integrated to lightline and will display a symbol while tags are created.

mileszs/ack.vim
---------------

Integrate ack with vim. I am using ag instead of ack. Just use :Ack
search_pattern to search recursively for something. It will add things to the
quickfix list. You can also use :LAck to add search results to the location
list. There are various other additional commands like :AckAdd,
:AckFromSearch. Use :Ack! to *not* jump to the first result.

Notice that after the search ends, this plugins opens a nice quickfix window
with the results; it is more or less the same as the quickfix window but with
various useful mappings that can be used on that result
window, i.e t/T to open to a new tab, o/O tio open the result, go to
preview the reslt, h/H/v/V to create a split, q to close the quickfix window.

roman/golden-ratio
------------------

A simple plugin to resize splits using the golden ration. I've
disabled the automatic resizing and instead use the
:GoldenRatioResize command mapped to <leader>gr to resize the
split when I want.

Some plugins to test:

https://github.com/terryma/vim-multiple-cursors
https://github.com/maxbrunsfeld/vim-yankstack
https://github.com/junegunn/vim-easy-align
https://github.com/SirVer/ultisnips
https://github.com/garbas/vim-snipmateg
https://github.com/tpope/vim-abolish
https://github.com/tpope/vim-dispatch
https://github.com/ervandew/supertab
