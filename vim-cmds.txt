Help for vim commands
=====================

Motions
-------

hjkl            Move cursor in normal mode L-D-U-R
gj/gk           Move cursor D-U on display line
w/W             Move to next word (or Word)
b/B             Move to previous word (or Word)
e/E             Move to end of word (or Word)
ge/gE           Move to end of *previous* word (or Word)
0               Move to start of line (col 0) - g0 to start of display line
^               Move to first non blank character of line - g^ for display line
$               Move to end of line - g$ for display line
g_              Move to the last non-blank character of line
* Notice that if you are using selection=exclusive the cursor won't be moved
past the last non-blank character thus g_ would behave the same as $.
G               Move to end of file
f{char}         Find character (move to character) - forwards
F{char}         Find character (move to character) - backwards
t{char}         Find character (move before character) - forwards
T{char}         Find character (move before character) - backwards
;               For character search go to next instance of char
,               For character search go to previous instance of char
*               Find (move) to next word under cursor - forwards
#               Find (move) to next word under cursor - backwards
%               Move to matching element (parenthesis, bracket etc)
(/)             Next/previous sentence (after a dot is found)
{/}             Next/previous paragraph. *Also jumps to blank lines; very useful*
H/M/L           Move to Hight / Middle / Low of screen
<c-U>/<c-D>     Move up/down (half a page)
<c-F>/<c-B>     Move forwards/backwards (a full page)
``              Move to previous position
`.              Move to previous change
'[              Move to start of previous changed block
']              Move to the end of previous changed block
`^              Move to previous insertion
`{mark}         Move to mark - row and column
'{mark}         Move to mark - only row
n/N             Move to next (or previous) match
gn/gN           This is a move that operates only on the next(or previous)
matched text - notice the difference with n/N. This is a rather strange move.
For example, if you search for "Jump" and press enter your cursor  will be
moved to the "J" of the next jump; now you can use an operator along with gn
to operate on that "Jump". For example dgn to delete it or cgn to change it to
something else. What is really useful is that using the repeating . you will
move to the next occurrence of "Jump" and re-do the same operation (something
like interactive search and replace or search and delete). Using n (twice) will skip
to the next result without applying the operator.

Jumps
-----

Notice these cannot be used as motions

<c-^>           Jump to alternate buffer (last opened one); I've mapped this to <Shift-Tab> for easier access
{number}<C-^}   Jump to corresponding bufer (need to use :ls to see numbers though)
<c-o>/<c-i>     Jump to previous/next position (uses the :jumps list)
g;/g,           Jump to older / newer change (uses the :changes list)
gi              Jump to last insert
gf              Jump to filename under cursor (try vimrc)
gx              Jump to URL under cursor (opens it in browser)

Please notice that you can use
:jumps          to view the jump list (<c-o> / <c-i) and
:changes        to view the changes list (g; / g,)

Commands
--------
i               Enter insert mode - before cursor (insert)
a               Enter insert mode - after cursor (append)
I               Enter insert mode - start of line text
A               Enter insert mode - end of line
r               Replace one (or more) character(s)
gr              Virtual replace mode (has better behavior with tab characters)
R               Enter replace mode
gR              Enter virtual replace mode
o               Enter insert mode in new line after current
O               Enter insert mode in new line before current
{count}s        Delete count characters and enter insert mode (substitute)
{count}S        Delete count lines and enter insert mode
.               Repeat last change
x/X             Delete character under (before) cursor
p/P             Paste after/before cursor
gp/gP           Paste after/before cursor moving the cursor to the end of the text
J               Join two lines
m{mark}         Set mark - lower case are local to file, Uppercase are global
s               Delete characters and enter insert mode (substitute)
S               Delete lines and enter insert mode

Useful combinations
-------------------
ddp             Reverse two lines
yyp             Duplicate line
xp              Reverse two characters
ea              Append at end of current word
gea             Append at end of previous word
dt.             Delete until end of sentence - do not include .
df.             Delete until end of sentence - including .
``              Move to previous position
`"              Goto last position (uses mark)
`.              Goto last change (uses mark)
`^              Goto last insertion (uses mark)
`~, `~          Goto start/end of last visual selection (uses mark)
VG              Visually select all lines from here to the end
ggVG            Visually select all lines of file
qaq             Clear register a (same as qqq qzq etc)

Lesser commands
---------------
{1,2}<C-g>      Show file status, adding 1 displays also the filaneme, adding 2 displays also the buffer number
zz/zt/zb        Move current line to center/top/bottom of screen
ZZ              Write file and quit; same as :wq or :x
ZQ              Quit and abort changes; same as :q!


Operators
---------
c{motion}       Delete selection and enter insert mode (change)
cc              Delete line and enter insert mode
C               Change to the end of line (same as c$)
d{motion}       Delete selection
dd              Delete line
D               Delete to the end of line (same as d$)
y{motion}       Yank (copy) selection
yy              yank line
Y               yank line (same as yy)
>{motion}       Increase indentation (shift left)
>>              Increase indentation of line
<{motion}       Decrease indentation (shift right)
<<              Decrease indentation of line
={motion}       Autoindent selection *or* filter the lines through the equalprg program
==              Autoindent line
!{motion}       Filter the lines through the executable program that is used as next argument
!!              Filter current line through the executable program that is used as next argument
gu{motion}      Switch to lowercase
guu             Switch line to lowercase
gU{motion}      Switch to uppercase
gUU             Switch line to uppercase
g~{motion}      Swap case
g~~             Swap line case
gq{motion}      Format text (this is not used that much; can use formatprg).  For example this will wrap text corresponding to the textwidth setting
gqq             Format current line
gw{motion}      Same as gq; does not use formatprg
gww             Format current line without using formatprg

/{pattern}      Search for pattern forwards
?{pattern}      Search for pattern backwards
n/N             Next / previous match
gn/gN           Select next / previous match
/{pattern}/e    Place cursor at the *end* of the match when jumping to the match
/{pattern}/C    Enforce case sensitivity
u               Undo
<C-r>           Redo

Text object selection
---------------------

Only can be used in visual mode or with an operator

{operator}a{selection}  Do operation including selection (around)
[operator}i{selection}  Do operation not including selection (inner)

Operator can be for example d (delete), c (change), etc
Selection can be w, W (w/Word), s (sentence), p (paragraph),
{([<'"` (to select the brackets content), t (to select html tag content).
Also })]> would be the same. Also b is an alternative for ( or ) and B an
alternative for [ or ].


Some examples
daw             Delete a word (works great)
diw             Delete inner word (does not work so nice because it leaves the spaces there)
caw             Change a word
ciw             Change inner word (works better because it leaves spaces there)


Ex mode
-------
<Tab>           Autocomplete
<C-d>           Show list of choices (works for cmds *and* args)

:set option     Sets the option to true
:set nooption   Sets the option to false
:set option?    Shows value of option (same as set nooption?)
:set option!    Toggle option
:so file        Source file (f.e to reload vimrc run :so $HOME/_vimrc)
:{range}delete {x} Delete range - yank to x
:{range}yank   {x} Yank range to x
:{line}put {x}      Put register x after line - it pastes always line wise
:{range}copy{to}    Copy range after location to (i.e 1,5copy$) - also :t, :co
:{range}move{to}    Move range after location to - also :m, :mo; for example :190,192m 207 will move three lines *after* line 206.  Also useful with visual selection!
:{range}join (:j)   Join lines
:{range}normal      Execute normal commands (f.e :%norm A; to insert semicolon after end of all lines) - also :norm
:{range}substitute  Replace - see examples below - also :s
:&                  Repeat last substitute :&& to repeat it with same flags
:!{command}     Execute command with shell
:{range}!{command}  Pass range to command (the {motion}! command is a shortcut for this)
:read               Insert file contents to current file (notice that you can use something like :read !{command})
:retab              Fix tabs (add ! to also change spaces)
:jumps              Display jumps list
:register           Display registers (takes also parameters) - :reg
:changes            Display changes list
:pwd                Print current directory
:file               Display info for a file (uses path for autocomplete) alias <C-g> for current file
:view (:vie)        Open file in read only (no parameter to change current file to RO)


:{range}global{pattern}{cmd}   For lines in range that match pattern execute cmd. To negate use :v (i.e :vglobal) or :g!. For example to delete blank lines
- g/^\s*$/d
or
- g/^\s*$/norm dd (norm executes the normal command dd for each line)

:%s/p1/p2/g     Replace pattern p1 with p2. The %s matches all lines in document, the g substitutes all patters in the line
:%s/\%u200b//g  Replace special character using its Unicode value
:%s//"\1"/g     Search and replace previous search pattern (//) with the captured part (\1) inside "
:%s///gn        Search for previous pattern and count its occurrences (gn)
:%s//\=@a/g     Search for previous pattern and replace it with the contents of a register

Substitute flags
----------------
g               Do all substitutions in the same line (or else it will do only the 1st one)
c               Confirm/reject each substitution
n               Suppress substitutions (used for counting)
e               Silence error
&               Re-use the same flags

Replacement string
------------------
\r              Insert CR
\t              Insert tab
\\              Insert  a backslash
\1 \2 etc       Insert capture group
\0              Insert entire match pattern - same as &
~               Use string from previous :substitute
\={script}      Execute script and insert it
\=@0            Insert the yank statement


:new            Create new buffer in a horizontal split
:vnew           Create new buffer in a vertical split
:edit (:e) {f}  Edit file f
:edit! (:e!)    Reload current file discarding changes
:write (:w)     Write file (filename is optional)
:x (or :exit or :xit or :exi) Write only when changes have been made and quit
:update (:up)   Write file only if it has been changed
:wnext (:wn)    Write file and go to next buffer
:wall           Save every buffer
:ls             List buffers
:bnext          Next buffer - :bn
:bprev          Previous buffer - :bp
:bdelete        Remove buffer :bd (does not delete file) - it takes arguments f. e :1,5bd or :bd 1 3 5
:args           Show arguments (files passed as parameter to vim) - can be modified. Can use globs or back tip expansion.
For example use :args test/*.py to add all python files to the args list
:argdo          Execute command for all arguments - f.e :argdo %p
:first, :next, :previous, :last     Move around in list of arguments
:cdo            Execute command on each line of quickfix list
:cfdo           Execute command on each file of quickfix list
:cl (:clist)    Display quickfix list
:cope (:copen) :ccl(ose)        Opens (and closes) the quickfix list (as a navigatable drawer window)
:cnext, :cprev, :cfirst, :clast Navigate the quickfix list
:cnfile, :cpfile                Next previous file on quickfix list
:copen, :close                  Show hide quickfix list window
:cc n                           Go to quickfix list entry n
:colder, :cnewer                Load a previous or current quickfix list
:grep pattern                   Run *external grep* command and save results on quickfix list (:vimgrep)
:vim pattern                    Run vim grep command and save results on quickfix list (:gr)
:lnext, :lprev, :lfirst, :llast Navigate the location list. A location list is similar to the quickfix list but is valid for a single window. For example you can use lvimgrep /Pattern/ % to search.
:lopen, :lclose                 Show hide location list windows
:ldo                            Execute command on each line of location list
:lli (:llist)                   Display Location list
:lgrep pattern                  Run *external* grep and save results on location list :lgr
:lvim pattern                   Run vim grep and save results on location list :lvimgrep
:ll n                           Go to location list entry n

Shortcuts in Ex mode
--------------------
<C-h>           Backspace
<C-w>           Delete word
<C-u>           Delete line
<C-[>           Switch to normal (like ESC)
<C-r>{register} Paste text (register you have yanked to with " - use 0 for the most recent yank)
<C-r><C-w>      Put word from text to command line
<C-r><C-a>      Put Word from text to command line
<C-f>           Open command line window
<C-b>           Cursor to begin of command-line
<C-e>           Cursor to end   of command-line
<C-f>           Opens the command-line window (unless a different key is specified in 'cedit')
<C-p>           Recall previous command-line from history (that matches pattern in front of the cursor)
<C-n>           Recall next     command-line from history (that matches pattern in front of the cursor)
<Up>            Recall previous command-line from history (that matches pattern in front of the cursor)
<Down>          Recall next     command-line from history (that matches pattern in front of the cursor)
<S-Up>          Recall previous command-line from history
<S-Down>        Recall next     command-line from history
<PageUp>        Recall previous command-line from history
<PageDown>      Recall next     command-line from history
<S-Left>        Cursor one word left
<C-Left>        Cursor one word left
<S-Right>       Cursor one word right
<C-Right>       Cursor one word right

<LeftMouse>  cursor at mouse click

Ex mode ranges
--------------
.               Current line
$               Last line
1               First line
%               All lines
.,$             Range from here until end
+5,+10          Relative ranges (from current)
/pattern1/,/pattern2/    Range by patterns
'{mark}         Line with mark

Macros
------

q{register}     Start macro capturing - stops capturing again with q. Write register in CAPS to append in the end of the existing macro
@{register}     Replay macro of register
@:              Replay last ex command
@@              Replay lat macro

Insert mode commands
--------------------

<C-h>           Backspace
<C-w>           Delete word
<C-u>           Delete line
<C-[>           Switch to normal (like ESC)
<C-o>           Switch to insert-normal mode
<C-r>{register} Paste text (register you have yanked to with " - use 0 for the most recent edit)
<C-k>{l1}{l2}   Insert digraph (f.e << or 14 or DG). Also, use :help digraph-table to see all digraphs.
<C-v>{chars}    Insert character using numeric value. Use uHex to insert unicode symbol, f.e <C-v>u20ac inserts €. Also this can be used to enter literal things like <ESC>, <CR> etc (for macro editing)

Registers
---------
Notice: Use small case to write to register - use caps to *append* to register.

0               Most recent yank
1               Most recent change/delete. The changes propagate to registers 2,3 etc. If the change is less than a line then the small change register (-) will be used instead; except some cases(!). More info on :help quote0
+/*             System (unless you have remapped it to the unnamed)
"               Unnamed
-               Small change register
_               Void / black hole (does not yank to anywhere)
.               Last inserted text
%               Filename
#               Alternate filename (this is the previous buffer that was open in the current window pane). You can switch to it with <C-^> (I've also mapped it to <S-Tab> from normal mode)
:               Most recent executed ex command
=               Expression register (opens prompt to do math)
/               Last search pattern

To write a register use :let @/ = "foo"

Other useful things
-------------------

@{register}                 Expand register; for example :echo @% to display current filename
expand(expression)          Expands expression; for example :echo expand('%:p:h') will display current file's path
:put =expand(expression)    Print expanded expression
:ab (:abbreviate)           List abbreviations (notice that the character in the 1st col means insert, command mode or both.
:ab {lhs} {rhs}             Replace {lhs} with {rhs} in both
command line and insert mode. Notice that for the ab to be
replaced you need to enter a space (or esc) after lhs (i.e if you
enter a letter it won't be replaced). Also press ctrl+v and then
space to avoid replacing. Note there's an optional <buffer>
argument you can add so that the abbreviation will be used only
for the current buffer (useful for ftplugins).
:abc                        Clear abbreviations
:iab                        Add insert mode abbreviation
:cab                        Add command line mode abbreviation

Visual mode
-----------

v               Enable
V               Enable line-visual mode
gv              Re-select last selection (also works from normal mode)
<c-v>           Εnable block-visual mode
<C-g>           Switch to select mode
o               Go to other end of selection

Select mode
-----------

Not very useful; mainly for integration with windows (using mouse,
shift+arrows etc). I have disabled these things thus it doesn't do anything
for me. You can try :behave mswin and play with the mouse to test it!

gh              Enter select mode
gH              Enter select mode linewise
g CTRL-H        Enter select mode block wise
<C-g>           Switch to visual mode

Other commands
--------------

q:              Open command line window
q/              Open search window
<C-g>           Display file info
g<C-g>          Display more file info
K               Display help for identifier under cursor (useful for vimrc editing)
:helpgrep       Grep through the help files
:scriptnames    Display list of scripts that vim has sourced
:retab          Re-tab the document (replace tabs with spaces based on settings)

How to convert a file that has 4-space tabs to 2-space tabs:

1. set ts=4 - this is what the file has initially (tabstop)
2. set noet - this will be used to convert 4 consecutive spaces to 1 tab (expandtab)
3. retab! - do the actual converting from spaces to tabs
4. set ts=2 - this is what we want
5. set et - now we want to covert 1 tab to 2 spaces
6. retab - finally convert the tabs to spaces

Using windows / Splits
----------------------
:tabnew         Open new tab
:vsplit or :vs or <C-w><C-v> or <C-w>v      Vertical Split
:split or :sp or <C-w><C-s> or <C-w>s       Horizontal Split
:split or :vsplit also take a filename to open the file to split directly
For CtrlP you can use <C-v> or <C-s> on the selected file to open it to split
<C-w>w or <C-w><C-w>                        Cycle buffer focus
<C-w>n or <C-w><C-n>                        Create new buffer in horz split
<C-w>hjkl or <C-w><C-hjkl>                  Move focus to L D U R split
<C-w>HJKL or <C-w><C-HJKL>                  Move current windows to far L D U R (notice this also changes split orientation if needed)
:close or :clo or :q or :quit or <C-w>c or <C-w><C-c> or <C-w>q or <C-w><C-q> Close/quit window/split
check out this https://vi.stackexchange.com/questions/9479/what-is-the-difference-between-quit-and-close-commands for their difference-between-quit-and-close-commands
:only or :on or <C-w>o or <C-w><C-o>        Make current window the only one on screen - close all others
<C-w>=                                      Make windows equal
<C-w>+                                      Increase window size (can take number in front)
<C-w>-                                      Decrease window size (can take number in front)

<C-w>T                                      Open current split to new tab
:tabedit                                    Open new tab (takes filename) - :tabe
:tabclose                                   Close tab - :tabc
:tabonly                                    Close other tabs - :tabo
gt                                          Next tab - :tabn, :tabnext - also takes tab number as argument
gT                                          Previous tab - :tabp, :tabprevious


Some options
------------

:set spell              To enable spell checking - move to errors with ]s and
[s, z= display suggestions, 1z= replace with first suggestion, zg mark as
correct, zw mark as misspelled, zug revert zg/zw for this word
:set ft                 To set the filetype to something else
:set path               To set the searching path (initially it is current directory) - can use globs to search recursively, also works with gf
:set sufficesadd        List of suffices (file extensions) to try when opening files with gf
:set wrap               Wrap long lines (when lines are longer then screen size display them in the following line). Notice that you can use gj/gj to move between visual lines (as opposed to j/k moving between real lines)

Folds
-----

zM                      Fold everything
zR                      Unfold everything
zm                      Increase global folding level (more)
zr                      Reduce global folding leve (reduce)
zf{motion}              Create a manual fold
zc/zo/zC/zO             Close/open a local fold; the zC/zO is recursive close/open
za/zA                   Open (if closed) or close (if opened) a local fold - zA is recursive
zx                      Reset fold to foldlevel
:set foldlevel          Default foldlevel - 0 = all folded (zM sets it to 0, zR to maximum)
zi                      Invert (toggle) fold enable
zj/zk                   Navigate to start of next/end of previous fold
zv                      Open just enough folds to reveal line of cursor
zf                      Fold (if foldmethod=manual) or add folding markers (if foldmethod=marker)

Pattern tips
------------
/\Mpattern              Search with less magic (i.e \M. will search for .)
/\Vpattern              Search with even less magic (i.e \V$ will search for $)
/\vpattern              Search with even more magic (i.e ( can be used for grouping without need to escape)
/\mpattern              Search with more magic (this is the default)
\zs /ze                 Start - end of match (i.e match all ` not followed by another ` but *do not match* the following character: /`\ze[^`]/)
\< \>                   Beginning - end of word

Netrw
-----

:Explore                Show explorer from current buffer - :Exp
:e.                     Show explorer from current directory
:e directory            Show explorer from directory
:Sexplore               Show explorer in (horz) split - :Sex
:Vexplore               Show explorer in vertical split - :Vex

ctags integration
-----------------
Create ctags file for python (notice that -L pattern list files *not matching the pattern)
ag -L kajhsdajhkgsd --py | ctags -L -

I am instead using the vim-gutentags plugin to offload my ctags file generation.

<C-]>                               Navigate to the tag under cursor; notice this works with VIM documentation also
<C-t>                               Back button for tags - notice that <C-o> does more or less the same but for *all* jumps (while <C-t> works only for tag jumps)
g<C-]>                              Navigate to the tag udner cursor displaying a selection list first
:tselect                            Show list of tag matches
:tnext / :tlast / :tpref / :tnext   Move between tag matches
:tag {keyword}                      Move to keyword
:tjump {keyword}                    Move to keyword with g<C-]>
<C-w> ]                             Navigate to the tag under cursor in a split window

Autocomplete
------------

<c-n>/<c-p>                         Start a/c with generic keyword matching
Instead of using the generic keyword matching you can a/c with a list of specific keywords:
<C-x><C-n>                         Current buffer keywords
<C-x><C-i>                         Included file keywords
<C-x><C-]>                         tags file keywords
<C-x><C-k>                         Dictionary lookup
<C-x><C-l>                         Whole line completion
<C-x><C-f>                         Filename completion
<C-x><C-o>                         Omni-completion
<C-x><C-s>                         Spelling correction a/c

From the a/c menu use the following:
<c-n>/<c-p>                        Next-previous word
<c-y>/<c-e>                        Accept current selection / cancel(exit) autocompletion
<c-h>/<c-l>                        Remove/add characters from match

You can also autocomplete search topics *or* press <C-d> to view a list of
possible candidates. For example try writing :help [<C-d>

Mapping keys
------------

There are six sets of mappings
- For Normal mode: When typing commands.
- For Visual mode: When typing commands while the Visual area is highlighted.
- For Select mode: like Visual mode but typing text replaces the selection.
- For Operator-pending mode: When an operator is pending (after "d", "y", "c",
  etc.).  See below: |omap-info|.
- For Insert mode.  These are also used in Replace mode.
- For Command-line mode: When entering a ":" or "/" command.

:map   :noremap  :unmap     Normal, Visual, Select, Operator-pending
:nmap  :nnoremap :nunmap    Normal
:vmap  :vnoremap :vunmap    Visual and Select
:smap  :snoremap :sunmap    Select
:xmap  :xnoremap :xunmap    Visual
:omap  :onoremap :ounmap    Operator-pending
:map!  :noremap! :unmap!    Insert and Command-line
:imap  :inoremap :iunmap    Insert
:lmap  :lnoremap :lunmap    Insert, Command-line, Lang-Arg
:cmap  :cnoremap :cunmap    Command-line
:tmap  :tnoremap :tunmap    Terminal-Job

Please notice that entering :map and friends without parameters will display
all active mappings!

Other useful info
-----------------

Start vim with

vim --noplugin

to run vim without loading any plugins.

Start vim with

vim -u NONE

to run vim without loading any vimrc
